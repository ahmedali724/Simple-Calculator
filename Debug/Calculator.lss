
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  000022c8  0000233c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001770  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f33  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00004cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00004eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  000072bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  00008636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  000099d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00009cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <main>
      7a:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e8       	ldi	r26, 0x83	; 131
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e8       	ldi	r24, 0x83	; 131
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e8       	ldi	r22, 0x83	; 131
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e5 57       	subi	r30, 0x75	; 117
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <GPIO_SetPinDirection>:
#include "BIT_MATH.h"
#include "GPIO_Interface.h"

/* Setting Pin Direction */
void GPIO_SetPinDirection(uint8 uint8_port, uint8 uint8_pin,
		uint8 uint8_direction) {
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	27 97       	sbiw	r28, 0x07	; 7
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	6a 83       	std	Y+2, r22	; 0x02
     e00:	4b 83       	std	Y+3, r20	; 0x03
	if (uint8_direction == INPUT) {
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <GPIO_SetPinDirection+0x22>
     e08:	74 c0       	rjmp	.+232    	; 0xef2 <GPIO_SetPinDirection+0x10a>
		switch (uint8_port) {
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3f 83       	std	Y+7, r19	; 0x07
     e12:	2e 83       	std	Y+6, r18	; 0x06
     e14:	8e 81       	ldd	r24, Y+6	; 0x06
     e16:	9f 81       	ldd	r25, Y+7	; 0x07
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	59 f1       	breq	.+86     	; 0xe74 <GPIO_SetPinDirection+0x8c>
     e1e:	2e 81       	ldd	r18, Y+6	; 0x06
     e20:	3f 81       	ldd	r19, Y+7	; 0x07
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	31 05       	cpc	r19, r1
     e26:	2c f4       	brge	.+10     	; 0xe32 <GPIO_SetPinDirection+0x4a>
     e28:	8e 81       	ldd	r24, Y+6	; 0x06
     e2a:	9f 81       	ldd	r25, Y+7	; 0x07
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f0       	breq	.+26     	; 0xe4a <GPIO_SetPinDirection+0x62>
     e30:	d2 c0       	rjmp	.+420    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
     e32:	2e 81       	ldd	r18, Y+6	; 0x06
     e34:	3f 81       	ldd	r19, Y+7	; 0x07
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	89 f1       	breq	.+98     	; 0xe9e <GPIO_SetPinDirection+0xb6>
     e3c:	8e 81       	ldd	r24, Y+6	; 0x06
     e3e:	9f 81       	ldd	r25, Y+7	; 0x07
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <GPIO_SetPinDirection+0x60>
     e46:	40 c0       	rjmp	.+128    	; 0xec8 <GPIO_SetPinDirection+0xe0>
     e48:	c6 c0       	rjmp	.+396    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
		case PORT_A:
			CLEAR_BIT(DDRA, uint8_pin);
     e4a:	aa e3       	ldi	r26, 0x3A	; 58
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ea e3       	ldi	r30, 0x3A	; 58
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_SetPinDirection+0x80>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_SetPinDirection+0x7c>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	b1 c0       	rjmp	.+354    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB, uint8_pin);
     e74:	a7 e3       	ldi	r26, 0x37	; 55
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_SetPinDirection+0xaa>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_SetPinDirection+0xa6>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	9c c0       	rjmp	.+312    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC, uint8_pin);
     e9e:	a4 e3       	ldi	r26, 0x34	; 52
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e4 e3       	ldi	r30, 0x34	; 52
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <GPIO_SetPinDirection+0xd4>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <GPIO_SetPinDirection+0xd0>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	87 c0       	rjmp	.+270    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD, uint8_pin);
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_SetPinDirection+0xfe>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_SetPinDirection+0xfa>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	72 c0       	rjmp	.+228    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		}
	} else if (uint8_direction == OUTPUT) {
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	09 f0       	breq	.+2      	; 0xefa <GPIO_SetPinDirection+0x112>
     ef8:	6e c0       	rjmp	.+220    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
		switch (uint8_port) {
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	3d 83       	std	Y+5, r19	; 0x05
     f02:	2c 83       	std	Y+4, r18	; 0x04
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	91 05       	cpc	r25, r1
     f0c:	49 f1       	breq	.+82     	; 0xf60 <GPIO_SetPinDirection+0x178>
     f0e:	2c 81       	ldd	r18, Y+4	; 0x04
     f10:	3d 81       	ldd	r19, Y+5	; 0x05
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	2c f4       	brge	.+10     	; 0xf22 <GPIO_SetPinDirection+0x13a>
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	61 f0       	breq	.+24     	; 0xf38 <GPIO_SetPinDirection+0x150>
     f20:	5a c0       	rjmp	.+180    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	3d 81       	ldd	r19, Y+5	; 0x05
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	71 f1       	breq	.+92     	; 0xf88 <GPIO_SetPinDirection+0x1a0>
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	91 05       	cpc	r25, r1
     f34:	e9 f1       	breq	.+122    	; 0xfb0 <GPIO_SetPinDirection+0x1c8>
     f36:	4f c0       	rjmp	.+158    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
		case PORT_A:
			SET_BIT(DDRA, uint8_pin);
     f38:	aa e3       	ldi	r26, 0x3A	; 58
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ea e3       	ldi	r30, 0x3A	; 58
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_SetPinDirection+0x16e>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_SetPinDirection+0x16a>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	3b c0       	rjmp	.+118    	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_B:
			SET_BIT(DDRB, uint8_pin);
     f60:	a7 e3       	ldi	r26, 0x37	; 55
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e3       	ldi	r30, 0x37	; 55
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <GPIO_SetPinDirection+0x196>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <GPIO_SetPinDirection+0x192>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	27 c0       	rjmp	.+78     	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_C:
			SET_BIT(DDRC, uint8_pin);
     f88:	a4 e3       	ldi	r26, 0x34	; 52
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <GPIO_SetPinDirection+0x1be>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <GPIO_SetPinDirection+0x1ba>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	13 c0       	rjmp	.+38     	; 0xfd6 <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_D:
			SET_BIT(DDRD, uint8_pin);
     fb0:	a1 e3       	ldi	r26, 0x31	; 49
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_SetPinDirection+0x1e6>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_SetPinDirection+0x1e2>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
			break;
		}
	}
}
     fd6:	27 96       	adiw	r28, 0x07	; 7
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <GPIO_SetPinValue>:

/* Setting Pin Value */
void GPIO_SetPinValue(uint8 uint8_port, uint8 uint8_pin, uint8 uint8_value) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	27 97       	sbiw	r28, 0x07	; 7
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	6a 83       	std	Y+2, r22	; 0x02
    1000:	4b 83       	std	Y+3, r20	; 0x03
	if (uint8_value == PIN_LOW) {
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 23       	and	r24, r24
    1006:	09 f0       	breq	.+2      	; 0x100a <GPIO_SetPinValue+0x22>
    1008:	74 c0       	rjmp	.+232    	; 0x10f2 <GPIO_SetPinValue+0x10a>
		switch (uint8_port) {
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3f 83       	std	Y+7, r19	; 0x07
    1012:	2e 83       	std	Y+6, r18	; 0x06
    1014:	8e 81       	ldd	r24, Y+6	; 0x06
    1016:	9f 81       	ldd	r25, Y+7	; 0x07
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	59 f1       	breq	.+86     	; 0x1074 <GPIO_SetPinValue+0x8c>
    101e:	2e 81       	ldd	r18, Y+6	; 0x06
    1020:	3f 81       	ldd	r19, Y+7	; 0x07
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <GPIO_SetPinValue+0x4a>
    1028:	8e 81       	ldd	r24, Y+6	; 0x06
    102a:	9f 81       	ldd	r25, Y+7	; 0x07
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f0       	breq	.+26     	; 0x104a <GPIO_SetPinValue+0x62>
    1030:	d2 c0       	rjmp	.+420    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
    1032:	2e 81       	ldd	r18, Y+6	; 0x06
    1034:	3f 81       	ldd	r19, Y+7	; 0x07
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	89 f1       	breq	.+98     	; 0x109e <GPIO_SetPinValue+0xb6>
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <GPIO_SetPinValue+0x60>
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <GPIO_SetPinValue+0xe0>
    1048:	c6 c0       	rjmp	.+396    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
		case PORT_A:
			CLEAR_BIT(PORTA, uint8_pin);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <GPIO_SetPinValue+0x80>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <GPIO_SetPinValue+0x7c>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	b1 c0       	rjmp	.+354    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB, uint8_pin);
    1074:	a8 e3       	ldi	r26, 0x38	; 56
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e3       	ldi	r30, 0x38	; 56
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <GPIO_SetPinValue+0xaa>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <GPIO_SetPinValue+0xa6>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	9c c0       	rjmp	.+312    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC, uint8_pin);
    109e:	a5 e3       	ldi	r26, 0x35	; 53
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e3       	ldi	r30, 0x35	; 53
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_SetPinValue+0xd4>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_SetPinValue+0xd0>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	87 c0       	rjmp	.+270    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD, uint8_pin);
    10c8:	a2 e3       	ldi	r26, 0x32	; 50
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e2 e3       	ldi	r30, 0x32	; 50
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_SetPinValue+0xfe>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_SetPinValue+0xfa>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	72 c0       	rjmp	.+228    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		}
	} else if (uint8_value == PIN_HIGH) {
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <GPIO_SetPinValue+0x112>
    10f8:	6e c0       	rjmp	.+220    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
		switch (uint8_port) {
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	49 f1       	breq	.+82     	; 0x1160 <GPIO_SetPinValue+0x178>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <GPIO_SetPinValue+0x13a>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <GPIO_SetPinValue+0x150>
    1120:	5a c0       	rjmp	.+180    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	71 f1       	breq	.+92     	; 0x1188 <GPIO_SetPinValue+0x1a0>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	e9 f1       	breq	.+122    	; 0x11b0 <GPIO_SetPinValue+0x1c8>
    1136:	4f c0       	rjmp	.+158    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
		case PORT_A:
			SET_BIT(PORTA, uint8_pin);
    1138:	ab e3       	ldi	r26, 0x3B	; 59
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_SetPinValue+0x16e>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_SetPinValue+0x16a>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	3b c0       	rjmp	.+118    	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_B:
			SET_BIT(PORTB, uint8_pin);
    1160:	a8 e3       	ldi	r26, 0x38	; 56
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e8 e3       	ldi	r30, 0x38	; 56
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_SetPinValue+0x196>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_SetPinValue+0x192>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	27 c0       	rjmp	.+78     	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_C:
			SET_BIT(PORTC, uint8_pin);
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_SetPinValue+0x1be>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_SetPinValue+0x1ba>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_D:
			SET_BIT(PORTD, uint8_pin);
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_SetPinValue+0x1e6>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_SetPinValue+0x1e2>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
			break;
		}
	}
}
    11d6:	27 96       	adiw	r28, 0x07	; 7
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <GPIO_GetPinValue>:

/* Getting Pin Value */
void GPIO_GetPinValue(uint8 uint8_port, uint8 uint8_pin, uint8 *p_uint8_data) {
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_GetPinValue+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <GPIO_GetPinValue+0x8>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <GPIO_GetPinValue+0xa>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    11fa:	5c 83       	std	Y+4, r21	; 0x04
    11fc:	4b 83       	std	Y+3, r20	; 0x03
	switch (uint8_port) {
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3e 83       	std	Y+6, r19	; 0x06
    1206:	2d 83       	std	Y+5, r18	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	49 f1       	breq	.+82     	; 0x1264 <GPIO_GetPinValue+0x7c>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <GPIO_GetPinValue+0x3e>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <GPIO_GetPinValue+0x54>
    1224:	5a c0       	rjmp	.+180    	; 0x12da <GPIO_GetPinValue+0xf2>
    1226:	2d 81       	ldd	r18, Y+5	; 0x05
    1228:	3e 81       	ldd	r19, Y+6	; 0x06
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	71 f1       	breq	.+92     	; 0x128c <GPIO_GetPinValue+0xa4>
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	e9 f1       	breq	.+122    	; 0x12b4 <GPIO_GetPinValue+0xcc>
    123a:	4f c0       	rjmp	.+158    	; 0x12da <GPIO_GetPinValue+0xf2>
	case PORT_A:
		*p_uint8_data = GET_BIT(PINA, uint8_pin);
    123c:	e9 e3       	ldi	r30, 0x39	; 57
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_GetPinValue+0x6e>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_GetPinValue+0x6a>
    125a:	84 23       	and	r24, r20
    125c:	eb 81       	ldd	r30, Y+3	; 0x03
    125e:	fc 81       	ldd	r31, Y+4	; 0x04
    1260:	80 83       	st	Z, r24
    1262:	3b c0       	rjmp	.+118    	; 0x12da <GPIO_GetPinValue+0xf2>
		break;
	case PORT_B:
		*p_uint8_data = GET_BIT(PINB, uint8_pin);
    1264:	e6 e3       	ldi	r30, 0x36	; 54
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_GetPinValue+0x96>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_GetPinValue+0x92>
    1282:	84 23       	and	r24, r20
    1284:	eb 81       	ldd	r30, Y+3	; 0x03
    1286:	fc 81       	ldd	r31, Y+4	; 0x04
    1288:	80 83       	st	Z, r24
    128a:	27 c0       	rjmp	.+78     	; 0x12da <GPIO_GetPinValue+0xf2>
		break;
	case PORT_C:
		*p_uint8_data = GET_BIT(PINC, uint8_pin);
    128c:	e3 e3       	ldi	r30, 0x33	; 51
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_GetPinValue+0xbe>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_GetPinValue+0xba>
    12aa:	84 23       	and	r24, r20
    12ac:	eb 81       	ldd	r30, Y+3	; 0x03
    12ae:	fc 81       	ldd	r31, Y+4	; 0x04
    12b0:	80 83       	st	Z, r24
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <GPIO_GetPinValue+0xf2>
		break;
	case PORT_D:
		*p_uint8_data = GET_BIT(PIND, uint8_pin);
    12b4:	e0 e3       	ldi	r30, 0x30	; 48
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_GetPinValue+0xe6>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_GetPinValue+0xe2>
    12d2:	84 23       	and	r24, r20
    12d4:	eb 81       	ldd	r30, Y+3	; 0x03
    12d6:	fc 81       	ldd	r31, Y+4	; 0x04
    12d8:	80 83       	st	Z, r24
		break;
	}
}
    12da:	26 96       	adiw	r28, 0x06	; 6
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <GPIO_SetPortDirection>:

/* Setting Port Direction */
void GPIO_SetPortDirection(uint8 uint8_port, uint8 uint8_direction) {
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <GPIO_SetPortDirection+0x6>
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <GPIO_SetPortDirection+0x8>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_SetPortDirection+0xa>
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	6a 83       	std	Y+2, r22	; 0x02
	if (uint8_direction == INPUT) {
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	88 23       	and	r24, r24
    1302:	79 f5       	brne	.+94     	; 0x1362 <GPIO_SetPortDirection+0x76>
		switch (uint8_port) {
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	3e 83       	std	Y+6, r19	; 0x06
    130c:	2d 83       	std	Y+5, r18	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	c9 f0       	breq	.+50     	; 0x134a <GPIO_SetPortDirection+0x5e>
    1318:	2d 81       	ldd	r18, Y+5	; 0x05
    131a:	3e 81       	ldd	r19, Y+6	; 0x06
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	2c f4       	brge	.+10     	; 0x132c <GPIO_SetPortDirection+0x40>
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	61 f0       	breq	.+24     	; 0x1342 <GPIO_SetPortDirection+0x56>
    132a:	50 c0       	rjmp	.+160    	; 0x13cc <GPIO_SetPortDirection+0xe0>
    132c:	2d 81       	ldd	r18, Y+5	; 0x05
    132e:	3e 81       	ldd	r19, Y+6	; 0x06
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	71 f0       	breq	.+28     	; 0x1352 <GPIO_SetPortDirection+0x66>
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	69 f0       	breq	.+26     	; 0x135a <GPIO_SetPortDirection+0x6e>
    1340:	45 c0       	rjmp	.+138    	; 0x13cc <GPIO_SetPortDirection+0xe0>
		case PORT_A:
			DDRA = 0x00;
    1342:	ea e3       	ldi	r30, 0x3A	; 58
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	10 82       	st	Z, r1
    1348:	41 c0       	rjmp	.+130    	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_B:
			DDRB = 0x00;
    134a:	e7 e3       	ldi	r30, 0x37	; 55
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	10 82       	st	Z, r1
    1350:	3d c0       	rjmp	.+122    	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_C:
			DDRC = 0x00;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	10 82       	st	Z, r1
    1358:	39 c0       	rjmp	.+114    	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_D:
			DDRD = 0x00;
    135a:	e1 e3       	ldi	r30, 0x31	; 49
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	10 82       	st	Z, r1
    1360:	35 c0       	rjmp	.+106    	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		}
	} else if (uint8_direction == OUTPUT) {
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 f5       	brne	.+100    	; 0x13cc <GPIO_SetPortDirection+0xe0>
		switch (uint8_port) {
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3c 83       	std	Y+4, r19	; 0x04
    1370:	2b 83       	std	Y+3, r18	; 0x03
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	d1 f0       	breq	.+52     	; 0x13b0 <GPIO_SetPortDirection+0xc4>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	2c f4       	brge	.+10     	; 0x1390 <GPIO_SetPortDirection+0xa4>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	61 f0       	breq	.+24     	; 0x13a6 <GPIO_SetPortDirection+0xba>
    138e:	1e c0       	rjmp	.+60     	; 0x13cc <GPIO_SetPortDirection+0xe0>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <GPIO_SetPortDirection+0xce>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <GPIO_SetPortDirection+0xd8>
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <GPIO_SetPortDirection+0xe0>
		case PORT_A:
			DDRA = 0xFF;
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	80 83       	st	Z, r24
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_B:
			DDRB = 0xFF;
    13b0:	e7 e3       	ldi	r30, 0x37	; 55
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	80 83       	st	Z, r24
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_C:
			DDRC = 0xFF;
    13ba:	e4 e3       	ldi	r30, 0x34	; 52
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_D:
			DDRD = 0xFF;
    13c4:	e1 e3       	ldi	r30, 0x31	; 49
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    13cc:	26 96       	adiw	r28, 0x06	; 6
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <GPIO_SetPortValue>:

/* Setting Port Value */
void GPIO_SetPortValue(uint8 uint8_port, uint8 uint8_value) {
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <GPIO_SetPortValue+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <GPIO_SetPortValue+0x8>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	6a 83       	std	Y+2, r22	; 0x02
	switch (uint8_port) {
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3c 83       	std	Y+4, r19	; 0x04
    13f6:	2b 83       	std	Y+3, r18	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	91 05       	cpc	r25, r1
    1400:	d1 f0       	breq	.+52     	; 0x1436 <GPIO_SetPortValue+0x58>
    1402:	2b 81       	ldd	r18, Y+3	; 0x03
    1404:	3c 81       	ldd	r19, Y+4	; 0x04
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	2c f4       	brge	.+10     	; 0x1416 <GPIO_SetPortValue+0x38>
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	61 f0       	breq	.+24     	; 0x142c <GPIO_SetPortValue+0x4e>
    1414:	1e c0       	rjmp	.+60     	; 0x1452 <GPIO_SetPortValue+0x74>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	81 f0       	breq	.+32     	; 0x1440 <GPIO_SetPortValue+0x62>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <GPIO_SetPortValue+0x6c>
    142a:	13 c0       	rjmp	.+38     	; 0x1452 <GPIO_SetPortValue+0x74>
	case PORT_A:
		PORTA = uint8_value;
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <GPIO_SetPortValue+0x74>
		break;
	case PORT_B:
		PORTB = uint8_value;
    1436:	e8 e3       	ldi	r30, 0x38	; 56
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	80 83       	st	Z, r24
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <GPIO_SetPortValue+0x74>
		break;
	case PORT_C:
		PORTC = uint8_value;
    1440:	e5 e3       	ldi	r30, 0x35	; 53
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 83       	st	Z, r24
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <GPIO_SetPortValue+0x74>
		break;
	case PORT_D:
		PORTD = uint8_value;
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	80 83       	st	Z, r24
		break;
	}
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <GPIO_GetPortValue>:

/* Getting Port Value */
void GPIO_GetPortValue(uint8 uint8_port, uint8 *p_uint8_data) {
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <GPIO_GetPortValue+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <GPIO_GetPortValue+0x8>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	7b 83       	std	Y+3, r23	; 0x03
    1472:	6a 83       	std	Y+2, r22	; 0x02
	switch (uint8_port) {
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3d 83       	std	Y+5, r19	; 0x05
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	e1 f0       	breq	.+56     	; 0x14c0 <GPIO_GetPortValue+0x60>
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <GPIO_GetPortValue+0x3c>
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <GPIO_GetPortValue+0x52>
    149a:	26 c0       	rjmp	.+76     	; 0x14e8 <GPIO_GetPortValue+0x88>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <GPIO_GetPortValue+0x6e>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	b1 f0       	breq	.+44     	; 0x14dc <GPIO_GetPortValue+0x7c>
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <GPIO_GetPortValue+0x88>
	case PORT_A:
		*p_uint8_data = PINA;
    14b2:	e9 e3       	ldi	r30, 0x39	; 57
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ba:	fb 81       	ldd	r31, Y+3	; 0x03
    14bc:	80 83       	st	Z, r24
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <GPIO_GetPortValue+0x88>
		break;
	case PORT_B:
		*p_uint8_data = PINB;
    14c0:	e6 e3       	ldi	r30, 0x36	; 54
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	ea 81       	ldd	r30, Y+2	; 0x02
    14c8:	fb 81       	ldd	r31, Y+3	; 0x03
    14ca:	80 83       	st	Z, r24
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <GPIO_GetPortValue+0x88>
		break;
	case PORT_C:
		*p_uint8_data = PINC;
    14ce:	e3 e3       	ldi	r30, 0x33	; 51
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	ea 81       	ldd	r30, Y+2	; 0x02
    14d6:	fb 81       	ldd	r31, Y+3	; 0x03
    14d8:	80 83       	st	Z, r24
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <GPIO_GetPortValue+0x88>
		break;
	case PORT_D:
		*p_uint8_data = PIND;
    14dc:	e0 e3       	ldi	r30, 0x30	; 48
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	ea 81       	ldd	r30, Y+2	; 0x02
    14e4:	fb 81       	ldd	r31, Y+3	; 0x03
    14e6:	80 83       	st	Z, r24
		break;
	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <KPD_GetPressedKey>:
#include "STD_TYPES.h"
#include "GPIO_Interface.h"
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"

uint8 KPD_GetPressedKey(void) {
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <KPD_GetPressedKey+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <KPD_GetPressedKey+0x8>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	/* value of the pressed key and initial has value of no pressed key */
	uint8 pressedKey = KPD_NO_PRESSED_KEY;
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	8b 83       	std	Y+3, r24	; 0x03
	KPD_COL_3 };
	/* array for keypad rows with specific row number */
	static uint8 kpdRowArr[ROW_NUM] = { KPD_ROW_0, KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3 };
	/* start loops to check the pins state */
	for (colCounter = 0; colCounter < COL_NUM; ++colCounter) {
    150a:	1a 82       	std	Y+2, r1	; 0x02
    150c:	5e c0       	rjmp	.+188    	; 0x15ca <KPD_GetPressedKey+0xd2>
		/* activate current column to check it */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_LOW);
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	e1 57       	subi	r30, 0x71	; 113
    1518:	fe 4f       	sbci	r31, 0xFE	; 254
    151a:	90 81       	ld	r25, Z
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	69 2f       	mov	r22, r25
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
		for (rowCounter = 0; rowCounter < ROW_NUM; ++rowCounter) {
    1526:	19 82       	std	Y+1, r1	; 0x01
    1528:	3d c0       	rjmp	.+122    	; 0x15a4 <KPD_GetPressedKey+0xac>
			/* read the value of the current row */
			GPIO_GetPinValue(KPD_ROW_PORT, kpdRowArr[rowCounter], &pinState);
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	fc 01       	movw	r30, r24
    1532:	e5 57       	subi	r30, 0x75	; 117
    1534:	fe 4f       	sbci	r31, 0xFE	; 254
    1536:	90 81       	ld	r25, Z
    1538:	9e 01       	movw	r18, r28
    153a:	2c 5f       	subi	r18, 0xFC	; 252
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	69 2f       	mov	r22, r25
    1542:	a9 01       	movw	r20, r18
    1544:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_GetPinValue>
			/* if the value is 0 that mean the key is pressed */
			if (pinState == PIN_LOW) {
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	88 23       	and	r24, r24
    154c:	41 f5       	brne	.+80     	; 0x159e <KPD_GetPressedKey+0xa6>
				/* get the value of the key with column and row number of loop */
				pressedKey = kpdArr[rowCounter][colCounter];
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	48 2f       	mov	r20, r24
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	ca 01       	movw	r24, r20
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	82 0f       	add	r24, r18
    1566:	93 1f       	adc	r25, r19
    1568:	fc 01       	movw	r30, r24
    156a:	ed 56       	subi	r30, 0x6D	; 109
    156c:	fe 4f       	sbci	r31, 0xFE	; 254
    156e:	80 81       	ld	r24, Z
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <KPD_GetPressedKey+0x9a>
				/* wait until the key is released */
				while (pinState == PIN_LOW) {
					/* get the same value until the key is released */
					GPIO_GetPinValue(KPD_ROW_PORT, kpdRowArr[rowCounter],
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	fc 01       	movw	r30, r24
    157c:	e5 57       	subi	r30, 0x75	; 117
    157e:	fe 4f       	sbci	r31, 0xFE	; 254
    1580:	90 81       	ld	r25, Z
    1582:	9e 01       	movw	r18, r28
    1584:	2c 5f       	subi	r18, 0xFC	; 252
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	69 2f       	mov	r22, r25
    158c:	a9 01       	movw	r20, r18
    158e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_GetPinValue>
			/* if the value is 0 that mean the key is pressed */
			if (pinState == PIN_LOW) {
				/* get the value of the key with column and row number of loop */
				pressedKey = kpdArr[rowCounter][colCounter];
				/* wait until the key is released */
				while (pinState == PIN_LOW) {
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	88 23       	and	r24, r24
    1596:	71 f3       	breq	.-36     	; 0x1574 <KPD_GetPressedKey+0x7c>
					/* get the same value until the key is released */
					GPIO_GetPinValue(KPD_ROW_PORT, kpdRowArr[rowCounter],
							&pinState);
				}
				/* return the value of pressed key in the keypad */
				return pressedKey;
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	1c c0       	rjmp	.+56     	; 0x15d6 <KPD_GetPressedKey+0xde>
	KPD_ROW_3 };
	/* start loops to check the pins state */
	for (colCounter = 0; colCounter < COL_NUM; ++colCounter) {
		/* activate current column to check it */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_LOW);
		for (rowCounter = 0; rowCounter < ROW_NUM; ++rowCounter) {
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <KPD_GetPressedKey+0xb4>
    15aa:	bf cf       	rjmp	.-130    	; 0x152a <KPD_GetPressedKey+0x32>
				/* return the value of pressed key in the keypad */
				return pressedKey;
			}
		}
		/* deactivate current column to check the next column in the next loop */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_HIGH);
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	fc 01       	movw	r30, r24
    15b4:	e1 57       	subi	r30, 0x71	; 113
    15b6:	fe 4f       	sbci	r31, 0xFE	; 254
    15b8:	90 81       	ld	r25, Z
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	69 2f       	mov	r22, r25
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
	KPD_COL_3 };
	/* array for keypad rows with specific row number */
	static uint8 kpdRowArr[ROW_NUM] = { KPD_ROW_0, KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3 };
	/* start loops to check the pins state */
	for (colCounter = 0; colCounter < COL_NUM; ++colCounter) {
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <KPD_GetPressedKey+0xda>
    15d0:	9e cf       	rjmp	.-196    	; 0x150e <KPD_GetPressedKey+0x16>
		}
		/* deactivate current column to check the next column in the next loop */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_HIGH);
	}
	/* return the value 0xFF which mean that no key is pressed */
	return pressedKey;
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <KPD_Init>:

void KPD_Init(void) {
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
	/* set the PORTD output for the columns of KEYPAD */
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_0, OUTPUT);
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	62 e0       	ldi	r22, 0x02	; 2
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_1, OUTPUT);
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	63 e0       	ldi	r22, 0x03	; 3
    15fe:	41 e0       	ldi	r20, 0x01	; 1
    1600:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_2, OUTPUT);
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	64 e0       	ldi	r22, 0x04	; 4
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_3, OUTPUT);
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	65 e0       	ldi	r22, 0x05	; 5
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	/* set the PORTB output for the rows of KEYPAD */
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_0, INPUT);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	64 e0       	ldi	r22, 0x04	; 4
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_1, INPUT);
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	65 e0       	ldi	r22, 0x05	; 5
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_2, INPUT);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	66 e0       	ldi	r22, 0x06	; 6
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_3, INPUT);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	67 e0       	ldi	r22, 0x07	; 7
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	/* set all pins of KEYPAD columns high */
	GPIO_SetPortValue(KPD_COL_PORT, 0x3C);
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	6c e3       	ldi	r22, 0x3C	; 60
    1644:	0e 94 ef 09 	call	0x13de	; 0x13de <GPIO_SetPortValue>
	/* set all pins of KEYPAD rows with internal pull-up resistor */
	GPIO_SetPortValue(KPD_ROW_PORT, 0xF0);
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	60 ef       	ldi	r22, 0xF0	; 240
    164c:	0e 94 ef 09 	call	0x13de	; 0x13de <GPIO_SetPortValue>
}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <LCD_SendCommand>:
#include "GPIO_Interface.h"
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>

void LCD_SendCommand(uint8 uint8_command) {
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	2f 97       	sbiw	r28, 0x0f	; 15
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	8f 87       	std	Y+15, r24	; 0x0f
	/* set RS pin to low...RS low => command  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, PIN_LOW);
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
	/* set RW pin to low...RW low => write  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
	/* send the command to data pin in LCD */
	GPIO_SetPortValue(LCD_DATA_PORT, uint8_command);
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	6f 85       	ldd	r22, Y+15	; 0x0f
    1684:	0e 94 ef 09 	call	0x13de	; 0x13de <GPIO_SetPortValue>
	/* set enable pin to high then low to generate pulse */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_HIGH);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	62 e0       	ldi	r22, 0x02	; 2
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	b0 e4       	ldi	r27, 0x40	; 64
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a e7       	ldi	r20, 0x7A	; 122
    16b0:	55 e4       	ldi	r21, 0x45	; 69
    16b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_SendCommand+0x8e>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <LCD_SendCommand+0xee>
    1726:	80 e9       	ldi	r24, 0x90	; 144
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_SendCommand+0xdc>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <LCD_SendCommand+0xd0>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_SendCommand+0x118>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_LOW);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
}
    1780:	2f 96       	adiw	r28, 0x0f	; 15
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <LCD_SendData>:

void LCD_SendData(uint8 uint8_data) {
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	2f 97       	sbiw	r28, 0x0f	; 15
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	8f 87       	std	Y+15, r24	; 0x0f
	/* set RS pin to high...RS high => data  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, PIN_HIGH);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
	/* set RW pin to low...RW low => write  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
	/* send the command to data pin in LCD */
	GPIO_SetPortValue(LCD_DATA_PORT, uint8_data);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	6f 85       	ldd	r22, Y+15	; 0x0f
    17c0:	0e 94 ef 09 	call	0x13de	; 0x13de <GPIO_SetPortValue>
	/* set enable pin to high then low to generate pulse */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_HIGH);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e4       	ldi	r27, 0x40	; 64
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	ad 87       	std	Y+13, r26	; 0x0d
    17dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	55 e4       	ldi	r21, 0x45	; 69
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	a9 87       	std	Y+9, r26	; 0x09
    17fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <LCD_SendData+0x8e>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	3f c0       	rjmp	.+126    	; 0x189e <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_SendData+0xee>
    1862:	80 e9       	ldi	r24, 0x90	; 144
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_SendData+0xdc>
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <LCD_SendData+0xd0>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_SendData+0x118>
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_LOW);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_SetPinValue>
}
    18bc:	2f 96       	adiw	r28, 0x0f	; 15
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <LCD_Init>:

void LCD_Init(void) {
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	2e 97       	sbiw	r28, 0x0e	; 14
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
	/* set the PORTA output for the data of LCD */
	GPIO_SetPortDirection(LCD_DATA_PORT, OUTPUT);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	0e 94 76 09 	call	0x12ec	; 0x12ec <GPIO_SetPortDirection>
	/* set the pin 0,1,2 in PORTB output for control of LCD */
	GPIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	41 e0       	ldi	r20, 0x01	; 1
    18fa:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	62 e0       	ldi	r22, 0x02	; 2
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 f4 06 	call	0xde8	; 0xde8 <GPIO_SetPinDirection>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e2       	ldi	r26, 0x20	; 32
    190e:	b2 e4       	ldi	r27, 0x42	; 66
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	9c 87       	std	Y+12, r25	; 0x0c
    1914:	ad 87       	std	Y+13, r26	; 0x0d
    1916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a e7       	ldi	r20, 0x7A	; 122
    1926:	55 e4       	ldi	r21, 0x45	; 69
    1928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8f 83       	std	Y+7, r24	; 0x07
    1932:	98 87       	std	Y+8, r25	; 0x08
    1934:	a9 87       	std	Y+9, r26	; 0x09
    1936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <LCD_Init+0x8c>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <LCD_Init+0x10a>
	else if (__tmp > 65535)
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <LCD_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <LCD_Init+0xec>
    199c:	80 e9       	ldi	r24, 0x90	; 144
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_Init+0xda>
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <LCD_Init+0xce>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <LCD_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_Init+0x116>
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
	/* wait for 40ms */
	_delay_ms(40);
	/* set LCD configuration to 2 lines and 5*8 font size */
	LCD_SendCommand(LCD_TWO_LINE_EIGHT_BIT_MODE);
    19ec:	88 e3       	ldi	r24, 0x38	; 56
    19ee:	0e 94 2b 0b 	call	0x1656	; 0x1656 <LCD_SendCommand>
	/* turn on the LCD and disable showing a cursor */
	LCD_SendCommand(LCD_CURSOR_OFF);
    19f2:	8c e0       	ldi	r24, 0x0C	; 12
    19f4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <LCD_SendCommand>
	/* clear display */
	LCD_SendCommand(LCD_CLEAR_DISPLAY);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	0e 94 2b 0b 	call	0x1656	; 0x1656 <LCD_SendCommand>
}
    19fe:	2e 96       	adiw	r28, 0x0e	; 14
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <LCD_DisplayString>:

void LCD_DisplayString(const uint8 *uint8_str) {
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <LCD_DisplayString+0x6>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	0e c0       	rjmp	.+28     	; 0x1a40 <LCD_DisplayString+0x30>
	/* loop until reach the last char of sting */
	while (uint8_str[i] != '\0') {
		/* send char by char of the string to the LCD */
		LCD_SendData(uint8_str[i]);
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	80 81       	ld	r24, Z
    1a36:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_SendData>
		/* increment the counter to the next char */
		i++;
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_DisplayString(const uint8 *uint8_str) {
	uint8 i = 0;
	/* loop until reach the last char of sting */
	while (uint8_str[i] != '\0') {
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	80 81       	ld	r24, Z
    1a52:	88 23       	and	r24, r24
    1a54:	39 f7       	brne	.-50     	; 0x1a24 <LCD_DisplayString+0x14>
		/* send char by char of the string to the LCD */
		LCD_SendData(uint8_str[i]);
		/* increment the counter to the next char */
		i++;
	}
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <LCD_NumberToString>:

void LCD_NumberToString(sint32 data) {
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	64 97       	sbiw	r28, 0x14	; 20
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	69 8b       	std	Y+17, r22	; 0x11
    1a78:	7a 8b       	std	Y+18, r23	; 0x12
    1a7a:	8b 8b       	std	Y+19, r24	; 0x13
    1a7c:	9c 8b       	std	Y+20, r25	; 0x14
	/* string to hold the ASCII result */
	char str[16];
	/* use itoa C function to convert the data to its corresponding ASCII value*/
	itoa(data, str, 10);
    1a7e:	89 89       	ldd	r24, Y+17	; 0x11
    1a80:	9a 89       	ldd	r25, Y+18	; 0x12
    1a82:	9e 01       	movw	r18, r28
    1a84:	2f 5f       	subi	r18, 0xFF	; 255
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	b9 01       	movw	r22, r18
    1a8a:	4a e0       	ldi	r20, 0x0A	; 10
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	0e 94 15 11 	call	0x222a	; 0x222a <itoa>
	/* display the string */
	LCD_DisplayString(str);
    1a92:	ce 01       	movw	r24, r28
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_DisplayString>
}
    1a9a:	64 96       	adiw	r28, 0x14	; 20
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <LCD_MoveCursor>:

void LCD_MoveCursor(uint8 row, uint8 column) {
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <LCD_MoveCursor+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <LCD_MoveCursor+0x8>
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	8a 83       	std	Y+2, r24	; 0x02
    1abc:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to know which address in the LCD will to cursor moved to */
	uint8 LCD_address = 0;
    1abe:	19 82       	std	Y+1, r1	; 0x01
	/* check which row is chosen */
	switch (row) {
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3d 83       	std	Y+5, r19	; 0x05
    1ac8:	2c 83       	std	Y+4, r18	; 0x04
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	31 f0       	breq	.+12     	; 0x1ade <LCD_MoveCursor+0x32>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	21 30       	cpi	r18, 0x01	; 1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	21 f0       	breq	.+8      	; 0x1ae4 <LCD_MoveCursor+0x38>
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <LCD_MoveCursor+0x3e>
	case 0:
		LCD_address = column;
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <LCD_MoveCursor+0x3e>
		break;
	case 1:
		/* the first address in the second line is 0x40 then add it to the LCD address */
		LCD_address = column + 0x40;
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	80 5c       	subi	r24, 0xC0	; 192
    1ae8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* move the LCD cursor to the specific address location */
	LCD_SendCommand(LCD_CURSOR_POSITION | LCD_address);
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	80 68       	ori	r24, 0x80	; 128
    1aee:	0e 94 2b 0b 	call	0x1656	; 0x1656 <LCD_SendCommand>
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	/* send the clear screen command to the LCD */
	LCD_SendCommand(LCD_CLEAR_DISPLAY);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <LCD_SendCommand>
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *Str) {
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <LCD_displayStringRowColumn+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <LCD_displayStringRowColumn+0x8>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	6a 83       	std	Y+2, r22	; 0x02
    1b26:	5c 83       	std	Y+4, r21	; 0x04
    1b28:	4b 83       	std	Y+3, r20	; 0x03
	/* go to to the required LCD position */
	LCD_MoveCursor(row, column);
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b2e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_MoveCursor>
	/* display the string */
	LCD_DisplayString(Str);
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_DisplayString>
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <main>:
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void) {
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	c6 54       	subi	r28, 0x46	; 70
    1b5a:	d0 40       	sbci	r29, 0x00	; 0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
	/* declare variable used in main file */
	sint32 num1, num2, result;
	float32 floatResult;
	uint8 i, j, k, floatFlag;
	/* call the function of the KEYPAD initialization */
	KPD_Init();
    1b66:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <KPD_Init>
	/* call the function of the LCD initialization */
	LCD_Init();
    1b6a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_Init>
	/* print my name on the LCD */
	LCD_DisplayString("***AHMED  ALI***");
    1b6e:	80 e6       	ldi	r24, 0x60	; 96
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_DisplayString>
	/* move the cursor to the second row of LCD */
	LCD_MoveCursor(1, 0);
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_MoveCursor>
	/* print the project name */
	LCD_DisplayString("Mini Calc. Proj.");
    1b7e:	81 e7       	ldi	r24, 0x71	; 113
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_DisplayString>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	aa ef       	ldi	r26, 0xFA	; 250
    1b8c:	b4 e4       	ldi	r27, 0x44	; 68
    1b8e:	8b 87       	std	Y+11, r24	; 0x0b
    1b90:	9c 87       	std	Y+12, r25	; 0x0c
    1b92:	ad 87       	std	Y+13, r26	; 0x0d
    1b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	55 e4       	ldi	r21, 0x45	; 69
    1ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8f 83       	std	Y+7, r24	; 0x07
    1bb0:	98 87       	std	Y+8, r25	; 0x08
    1bb2:	a9 87       	std	Y+9, r26	; 0x09
    1bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb8:	78 85       	ldd	r23, Y+8	; 0x08
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <main+0x90>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <main+0x10e>
	else if (__tmp > 65535)
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <main+0xf0>
    1c1a:	80 e9       	ldi	r24, 0x90	; 144
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <main+0xde>
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <main+0xd2>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <main+0x11a>
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
	/* wait for 2 second */
	_delay_ms(2000);
	/* clean screen */
	LCD_ClearScreen();
    1c6a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_ClearScreen>
	/* super loop */
	while (1) {
		/* declare the string used in super loop */
		char input[16] = "", num1_str[8] = "", num2_str[8] = "", operator, temp;
    1c6e:	1d a2       	std	Y+37, r1	; 0x25
    1c70:	1e a2       	std	Y+38, r1	; 0x26
    1c72:	1f a2       	std	Y+39, r1	; 0x27
    1c74:	18 a6       	std	Y+40, r1	; 0x28
    1c76:	8c e0       	ldi	r24, 0x0C	; 12
    1c78:	fe 01       	movw	r30, r28
    1c7a:	b9 96       	adiw	r30, 0x29	; 41
    1c7c:	df 01       	movw	r26, r30
    1c7e:	28 2f       	mov	r18, r24
    1c80:	1d 92       	st	X+, r1
    1c82:	2a 95       	dec	r18
    1c84:	e9 f7       	brne	.-6      	; 0x1c80 <main+0x138>
    1c86:	1d aa       	std	Y+53, r1	; 0x35
    1c88:	1e aa       	std	Y+54, r1	; 0x36
    1c8a:	1f aa       	std	Y+55, r1	; 0x37
    1c8c:	18 ae       	std	Y+56, r1	; 0x38
    1c8e:	19 ae       	std	Y+57, r1	; 0x39
    1c90:	1a ae       	std	Y+58, r1	; 0x3a
    1c92:	1b ae       	std	Y+59, r1	; 0x3b
    1c94:	1c ae       	std	Y+60, r1	; 0x3c
    1c96:	fe 01       	movw	r30, r28
    1c98:	fd 96       	adiw	r30, 0x3d	; 61
    1c9a:	10 82       	st	Z, r1
    1c9c:	11 82       	std	Z+1, r1	; 0x01
    1c9e:	12 82       	std	Z+2, r1	; 0x02
    1ca0:	13 82       	std	Z+3, r1	; 0x03
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ef 5b       	subi	r30, 0xBF	; 191
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	10 82       	st	Z, r1
    1caa:	11 82       	std	Z+1, r1	; 0x01
    1cac:	12 82       	std	Z+2, r1	; 0x02
    1cae:	13 82       	std	Z+3, r1	; 0x03
		/* at first all number is 0 */
		num1 = 0, num2 = 0;
    1cb0:	19 a2       	std	Y+33, r1	; 0x21
    1cb2:	1a a2       	std	Y+34, r1	; 0x22
    1cb4:	1b a2       	std	Y+35, r1	; 0x23
    1cb6:	1c a2       	std	Y+36, r1	; 0x24
    1cb8:	1d 8e       	std	Y+29, r1	; 0x1d
    1cba:	1e 8e       	std	Y+30, r1	; 0x1e
    1cbc:	1f 8e       	std	Y+31, r1	; 0x1f
    1cbe:	18 a2       	std	Y+32, r1	; 0x20
		/* flag to check if there is a float numbers in division */
		floatFlag = 0;
    1cc0:	19 8a       	std	Y+17, r1	; 0x11
		i = 0;
    1cc2:	1c 8a       	std	Y+20, r1	; 0x14
		while (1) {
			if (i < 16) {
    1cc4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc6:	80 31       	cpi	r24, 0x10	; 16
    1cc8:	e8 f7       	brcc	.-6      	; 0x1cc4 <main+0x17c>
				/* get input from the KEYPAD */
				temp = KPD_GetPressedKey();
    1cca:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KPD_GetPressedKey>
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <main+0x190>
				/* loop until a key is pressed, if key is pressed then the loop will break */
				while (temp == KPD_NO_PRESSED_KEY) {
					temp = KPD_GetPressedKey();
    1cd2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KPD_GetPressedKey>
    1cd6:	8f 87       	std	Y+15, r24	; 0x0f
		while (1) {
			if (i < 16) {
				/* get input from the KEYPAD */
				temp = KPD_GetPressedKey();
				/* loop until a key is pressed, if key is pressed then the loop will break */
				while (temp == KPD_NO_PRESSED_KEY) {
    1cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cda:	8f 3f       	cpi	r24, 0xFF	; 255
    1cdc:	d1 f3       	breq	.-12     	; 0x1cd2 <main+0x18a>
					temp = KPD_GetPressedKey();
				}
				/* if the clean screen button is pressed in KEYPAD */
				if (temp == 'C') {
    1cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce0:	83 34       	cpi	r24, 0x43	; 67
    1ce2:	69 f4       	brne	.+26     	; 0x1cfe <main+0x1b6>
					/* clean the LCD screen */
					LCD_ClearScreen();
    1ce4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_ClearScreen>
					/* make the input string empty again */
					strcpy(input, "");
    1ce8:	ce 01       	movw	r24, r28
    1cea:	85 96       	adiw	r24, 0x25	; 37
    1cec:	22 e8       	ldi	r18, 0x82	; 130
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	0e 94 0c 11 	call	0x2218	; 0x2218 <memcpy>
					/* start a loop from first again */
					i = 0;
    1cfa:	1c 8a       	std	Y+20, r1	; 0x14
    1cfc:	e3 cf       	rjmp	.-58     	; 0x1cc4 <main+0x17c>
					continue;
				}
				/* put the value of key pressed in the input string */
				input[i] = temp;
    1cfe:	8c 89       	ldd	r24, Y+20	; 0x14
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	85 96       	adiw	r24, 0x25	; 37
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e2 0f       	add	r30, r18
    1d0c:	f3 1f       	adc	r31, r19
    1d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d10:	80 83       	st	Z, r24
				/* if = button is pressed, then it is the end of operation */
				if (input[i] == '=') {
    1d12:	8c 89       	ldd	r24, Y+20	; 0x14
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	ce 01       	movw	r24, r28
    1d1a:	85 96       	adiw	r24, 0x25	; 37
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	e2 0f       	add	r30, r18
    1d20:	f3 1f       	adc	r31, r19
    1d22:	80 81       	ld	r24, Z
    1d24:	8d 33       	cpi	r24, 0x3D	; 61
    1d26:	81 f4       	brne	.+32     	; 0x1d48 <main+0x200>
					/* show = in the LCD */
					LCD_SendData('=');
    1d28:	8d e3       	ldi	r24, 0x3D	; 61
    1d2a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_SendData>
					/* the null character to indicate the end of string */
					input[i] = '\0';
    1d2e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	ce 01       	movw	r24, r28
    1d36:	85 96       	adiw	r24, 0x25	; 37
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e2 0f       	add	r30, r18
    1d3c:	f3 1f       	adc	r31, r19
    1d3e:	10 82       	st	Z, r1
				/* increase the index of input string */
				i++;
			}
		}
		/* reset all counters */
		i = 0, j = 0, k = 0;
    1d40:	1c 8a       	std	Y+20, r1	; 0x14
    1d42:	1b 8a       	std	Y+19, r1	; 0x13
    1d44:	1a 8a       	std	Y+18, r1	; 0x12
    1d46:	85 c0       	rjmp	.+266    	; 0x1e52 <main+0x30a>
					input[i] = '\0';
					/* break the loop */
					break;
				}
				/* if the button pressed is not = of C then send the button value to LCD */
				LCD_SendData(input[i]);
    1d48:	8c 89       	ldd	r24, Y+20	; 0x14
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	ce 01       	movw	r24, r28
    1d50:	85 96       	adiw	r24, 0x25	; 37
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	80 81       	ld	r24, Z
    1d5a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_SendData>
				/* increase the index of input string */
				i++;
    1d5e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8c 8b       	std	Y+20, r24	; 0x14
    1d64:	af cf       	rjmp	.-162    	; 0x1cc4 <main+0x17c>
		}
		/* reset all counters */
		i = 0, j = 0, k = 0;
		while (input[i] != '\0') {
			/* if the operator char is found in input string */
			if (input[i] == '*' || input[i] == '/' || input[i] == '+'
    1d66:	8c 89       	ldd	r24, Y+20	; 0x14
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	85 96       	adiw	r24, 0x25	; 37
    1d70:	fc 01       	movw	r30, r24
    1d72:	e2 0f       	add	r30, r18
    1d74:	f3 1f       	adc	r31, r19
    1d76:	80 81       	ld	r24, Z
    1d78:	8a 32       	cpi	r24, 0x2A	; 42
    1d7a:	09 f1       	breq	.+66     	; 0x1dbe <main+0x276>
    1d7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	ce 01       	movw	r24, r28
    1d84:	85 96       	adiw	r24, 0x25	; 37
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 32       	cpi	r24, 0x2F	; 47
    1d90:	b1 f0       	breq	.+44     	; 0x1dbe <main+0x276>
    1d92:	8c 89       	ldd	r24, Y+20	; 0x14
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	ce 01       	movw	r24, r28
    1d9a:	85 96       	adiw	r24, 0x25	; 37
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e2 0f       	add	r30, r18
    1da0:	f3 1f       	adc	r31, r19
    1da2:	80 81       	ld	r24, Z
    1da4:	8b 32       	cpi	r24, 0x2B	; 43
    1da6:	59 f0       	breq	.+22     	; 0x1dbe <main+0x276>
    1da8:	8c 89       	ldd	r24, Y+20	; 0x14
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	ce 01       	movw	r24, r28
    1db0:	85 96       	adiw	r24, 0x25	; 37
    1db2:	fc 01       	movw	r30, r24
    1db4:	e2 0f       	add	r30, r18
    1db6:	f3 1f       	adc	r31, r19
    1db8:	80 81       	ld	r24, Z
    1dba:	8d 32       	cpi	r24, 0x2D	; 45
    1dbc:	91 f5       	brne	.+100    	; 0x1e22 <main+0x2da>
					|| input[i] == '-') {
				/* then store the operator in the variable */
				operator = input[i];
    1dbe:	8c 89       	ldd	r24, Y+20	; 0x14
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	85 96       	adiw	r24, 0x25	; 37
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 8b       	std	Y+16, r24	; 0x10
				/* increase the index of input string */
				i++;
    1dd2:	8c 89       	ldd	r24, Y+20	; 0x14
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	8c 8b       	std	Y+20, r24	; 0x14
    1dd8:	18 c0       	rjmp	.+48     	; 0x1e0a <main+0x2c2>
				/* loop to take the second number of the operation and store it in a string */
				while (input[i] != '\0') {
					/* store digit digit of the second number in the second number string */
					num2_str[k] = input[i];
    1dda:	8a 89       	ldd	r24, Y+18	; 0x12
    1ddc:	48 2f       	mov	r20, r24
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	8c 89       	ldd	r24, Y+20	; 0x14
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	ce 01       	movw	r24, r28
    1de8:	85 96       	adiw	r24, 0x25	; 37
    1dea:	fc 01       	movw	r30, r24
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	20 81       	ld	r18, Z
    1df2:	ce 01       	movw	r24, r28
    1df4:	cd 96       	adiw	r24, 0x3d	; 61
    1df6:	fc 01       	movw	r30, r24
    1df8:	e4 0f       	add	r30, r20
    1dfa:	f5 1f       	adc	r31, r21
    1dfc:	20 83       	st	Z, r18
					/* increase the index of second number string */
					k++;
    1dfe:	8a 89       	ldd	r24, Y+18	; 0x12
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	8a 8b       	std	Y+18, r24	; 0x12
					/* increase the index of input string */
					i++;
    1e04:	8c 89       	ldd	r24, Y+20	; 0x14
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	8c 8b       	std	Y+20, r24	; 0x14
				/* then store the operator in the variable */
				operator = input[i];
				/* increase the index of input string */
				i++;
				/* loop to take the second number of the operation and store it in a string */
				while (input[i] != '\0') {
    1e0a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	ce 01       	movw	r24, r28
    1e12:	85 96       	adiw	r24, 0x25	; 37
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 23       	and	r24, r24
    1e1e:	e9 f6       	brne	.-70     	; 0x1dda <main+0x292>
    1e20:	24 c0       	rjmp	.+72     	; 0x1e6a <main+0x322>
				break;
			}
			/* if the operator is not found, then we still in the first number part */
			else {
				/* store digit digit of the first number in the first number string */
				num1_str[j] = input[i];
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	48 2f       	mov	r20, r24
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	8c 89       	ldd	r24, Y+20	; 0x14
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	ce 01       	movw	r24, r28
    1e30:	85 96       	adiw	r24, 0x25	; 37
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	20 81       	ld	r18, Z
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	c5 96       	adiw	r24, 0x35	; 53
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e4 0f       	add	r30, r20
    1e42:	f5 1f       	adc	r31, r21
    1e44:	20 83       	st	Z, r18
				/* increase the index of first number string */
				j++;
    1e46:	8b 89       	ldd	r24, Y+19	; 0x13
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
				/* increase the index of input string */
				i++;
    1e4c:	8c 89       	ldd	r24, Y+20	; 0x14
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	8c 8b       	std	Y+20, r24	; 0x14
				i++;
			}
		}
		/* reset all counters */
		i = 0, j = 0, k = 0;
		while (input[i] != '\0') {
    1e52:	8c 89       	ldd	r24, Y+20	; 0x14
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	ce 01       	movw	r24, r28
    1e5a:	85 96       	adiw	r24, 0x25	; 37
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <main+0x322>
    1e68:	7e cf       	rjmp	.-260    	; 0x1d66 <main+0x21e>
				/* increase the index of input string */
				i++;
			}
		}
		/* function to convert string to integer to use it in the operation */
		num1 = atoi(num1_str);
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	c5 96       	adiw	r24, 0x35	; 53
    1e6e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <atoi>
    1e72:	aa 27       	eor	r26, r26
    1e74:	97 fd       	sbrc	r25, 7
    1e76:	a0 95       	com	r26
    1e78:	ba 2f       	mov	r27, r26
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	9a a3       	std	Y+34, r25	; 0x22
    1e7e:	ab a3       	std	Y+35, r26	; 0x23
    1e80:	bc a3       	std	Y+36, r27	; 0x24
		num2 = atoi(num2_str);
    1e82:	ce 01       	movw	r24, r28
    1e84:	cd 96       	adiw	r24, 0x3d	; 61
    1e86:	0e 94 ee 10 	call	0x21dc	; 0x21dc <atoi>
    1e8a:	aa 27       	eor	r26, r26
    1e8c:	97 fd       	sbrc	r25, 7
    1e8e:	a0 95       	com	r26
    1e90:	ba 2f       	mov	r27, r26
    1e92:	8d 8f       	std	Y+29, r24	; 0x1d
    1e94:	9e 8f       	std	Y+30, r25	; 0x1e
    1e96:	af 8f       	std	Y+31, r26	; 0x1f
    1e98:	b8 a3       	std	Y+32, r27	; 0x20
		/* switch case to know which operator is chosen */
		switch (operator) {
    1e9a:	88 89       	ldd	r24, Y+16	; 0x10
    1e9c:	a8 2f       	mov	r26, r24
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	27 96       	adiw	r28, 0x07	; 7
    1ea2:	bf af       	std	Y+63, r27	; 0x3f
    1ea4:	ae af       	std	Y+62, r26	; 0x3e
    1ea6:	27 97       	sbiw	r28, 0x07	; 7
    1ea8:	27 96       	adiw	r28, 0x07	; 7
    1eaa:	2e ad       	ldd	r18, Y+62	; 0x3e
    1eac:	3f ad       	ldd	r19, Y+63	; 0x3f
    1eae:	27 97       	sbiw	r28, 0x07	; 7
    1eb0:	2b 32       	cpi	r18, 0x2B	; 43
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	f1 f0       	breq	.+60     	; 0x1ef2 <main+0x3aa>
    1eb6:	27 96       	adiw	r28, 0x07	; 7
    1eb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eba:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ebc:	27 97       	sbiw	r28, 0x07	; 7
    1ebe:	8c 32       	cpi	r24, 0x2C	; 44
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	44 f4       	brge	.+16     	; 0x1ed4 <main+0x38c>
    1ec4:	27 96       	adiw	r28, 0x07	; 7
    1ec6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ec8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1eca:	27 97       	sbiw	r28, 0x07	; 7
    1ecc:	aa 32       	cpi	r26, 0x2A	; 42
    1ece:	b1 05       	cpc	r27, r1
    1ed0:	91 f1       	breq	.+100    	; 0x1f36 <main+0x3ee>
    1ed2:	b5 c0       	rjmp	.+362    	; 0x203e <main+0x4f6>
    1ed4:	27 96       	adiw	r28, 0x07	; 7
    1ed6:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ed8:	3f ad       	ldd	r19, Y+63	; 0x3f
    1eda:	27 97       	sbiw	r28, 0x07	; 7
    1edc:	2d 32       	cpi	r18, 0x2D	; 45
    1ede:	31 05       	cpc	r19, r1
    1ee0:	c9 f0       	breq	.+50     	; 0x1f14 <main+0x3cc>
    1ee2:	27 96       	adiw	r28, 0x07	; 7
    1ee4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ee6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ee8:	27 97       	sbiw	r28, 0x07	; 7
    1eea:	8f 32       	cpi	r24, 0x2F	; 47
    1eec:	91 05       	cpc	r25, r1
    1eee:	b1 f1       	breq	.+108    	; 0x1f5c <main+0x414>
    1ef0:	a6 c0       	rjmp	.+332    	; 0x203e <main+0x4f6>
		case '+':
			/* the + operator is chosen, then add two numbers and store it in result number */
			result = num1 + num2;
    1ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef6:	ab a1       	ldd	r26, Y+35	; 0x23
    1ef8:	bc a1       	ldd	r27, Y+36	; 0x24
    1efa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1efc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1efe:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f00:	58 a1       	ldd	r21, Y+32	; 0x20
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	a4 1f       	adc	r26, r20
    1f08:	b5 1f       	adc	r27, r21
    1f0a:	89 8f       	std	Y+25, r24	; 0x19
    1f0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f10:	bc 8f       	std	Y+28, r27	; 0x1c
    1f12:	95 c0       	rjmp	.+298    	; 0x203e <main+0x4f6>
			break;
		case '-':
			/* the - operator is chosen, then subtract two numbers and store it in result number */
			result = num1 - num2;
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	ab a1       	ldd	r26, Y+35	; 0x23
    1f1a:	bc a1       	ldd	r27, Y+36	; 0x24
    1f1c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f1e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f20:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f22:	58 a1       	ldd	r21, Y+32	; 0x20
    1f24:	82 1b       	sub	r24, r18
    1f26:	93 0b       	sbc	r25, r19
    1f28:	a4 0b       	sbc	r26, r20
    1f2a:	b5 0b       	sbc	r27, r21
    1f2c:	89 8f       	std	Y+25, r24	; 0x19
    1f2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f30:	ab 8f       	std	Y+27, r26	; 0x1b
    1f32:	bc 8f       	std	Y+28, r27	; 0x1c
    1f34:	84 c0       	rjmp	.+264    	; 0x203e <main+0x4f6>
			break;
		case '*':
			/* the * operator is chosen, then multiply two numbers and store it in result number */
			result = num1 * num2;
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	ab a1       	ldd	r26, Y+35	; 0x23
    1f3c:	bc a1       	ldd	r27, Y+36	; 0x24
    1f3e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f40:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f42:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f44:	58 a1       	ldd	r21, Y+32	; 0x20
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsi3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	89 8f       	std	Y+25, r24	; 0x19
    1f54:	9a 8f       	std	Y+26, r25	; 0x1a
    1f56:	ab 8f       	std	Y+27, r26	; 0x1b
    1f58:	bc 8f       	std	Y+28, r27	; 0x1c
    1f5a:	71 c0       	rjmp	.+226    	; 0x203e <main+0x4f6>
			break;
		case '/':
			/* the / operator is chosen, then divide two numbers and store it in result number */
			/* if the first number divisible by the second, then there is no floating part */
			if (num1 % num2 == 0) {
    1f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f60:	ab a1       	ldd	r26, Y+35	; 0x23
    1f62:	bc a1       	ldd	r27, Y+36	; 0x24
    1f64:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f66:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f68:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f6a:	58 a1       	ldd	r21, Y+32	; 0x20
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__divmodsi4>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	a1 05       	cpc	r26, r1
    1f7c:	b1 05       	cpc	r27, r1
    1f7e:	99 f4       	brne	.+38     	; 0x1fa6 <main+0x45e>
				result = num1 / num2;
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	ab a1       	ldd	r26, Y+35	; 0x23
    1f86:	bc a1       	ldd	r27, Y+36	; 0x24
    1f88:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f8a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f8c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f8e:	58 a1       	ldd	r21, Y+32	; 0x20
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__divmodsi4>
    1f98:	da 01       	movw	r26, r20
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	89 8f       	std	Y+25, r24	; 0x19
    1f9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa2:	bc 8f       	std	Y+28, r27	; 0x1c
    1fa4:	4c c0       	rjmp	.+152    	; 0x203e <main+0x4f6>
			} else {
				/* else, there is a floating part and start to calculate it */
				floatResult = (float32) num1 / num2;
    1fa6:	69 a1       	ldd	r22, Y+33	; 0x21
    1fa8:	7a a1       	ldd	r23, Y+34	; 0x22
    1faa:	8b a1       	ldd	r24, Y+35	; 0x23
    1fac:	9c a1       	ldd	r25, Y+36	; 0x24
    1fae:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1fb2:	7b 01       	movw	r14, r22
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fb8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1fba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fbc:	98 a1       	ldd	r25, Y+32	; 0x20
    1fbe:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1fc2:	9b 01       	movw	r18, r22
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	c8 01       	movw	r24, r16
    1fc8:	b7 01       	movw	r22, r14
    1fca:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8d 8b       	std	Y+21, r24	; 0x15
    1fd4:	9e 8b       	std	Y+22, r25	; 0x16
    1fd6:	af 8b       	std	Y+23, r26	; 0x17
    1fd8:	b8 8f       	std	Y+24, r27	; 0x18
				/* take the integer part of the result */
				result = num1 / num2;
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	ab a1       	ldd	r26, Y+35	; 0x23
    1fe0:	bc a1       	ldd	r27, Y+36	; 0x24
    1fe2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1fe4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1fe6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1fe8:	58 a1       	ldd	r21, Y+32	; 0x20
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__divmodsi4>
    1ff2:	da 01       	movw	r26, r20
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	89 8f       	std	Y+25, r24	; 0x19
    1ff8:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffa:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffc:	bc 8f       	std	Y+28, r27	; 0x1c
				/* make the flag is true */
				floatFlag = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	89 8b       	std	Y+17, r24	; 0x11
				/* get the first 3 digits of the floating part */
				floatResult = (floatResult - result) * 1000;
    2002:	69 8d       	ldd	r22, Y+25	; 0x19
    2004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200a:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    200e:	9b 01       	movw	r18, r22
    2010:	ac 01       	movw	r20, r24
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a e7       	ldi	r20, 0x7A	; 122
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8d 8b       	std	Y+21, r24	; 0x15
    2038:	9e 8b       	std	Y+22, r25	; 0x16
    203a:	af 8b       	std	Y+23, r26	; 0x17
    203c:	b8 8f       	std	Y+24, r27	; 0x18
			}
			break;
		}
		/* start to print the result of the operation */
		/* check if there is a floating part in the operation */
		if (floatFlag) {
    203e:	89 89       	ldd	r24, Y+17	; 0x11
    2040:	88 23       	and	r24, r24
    2042:	21 f1       	breq	.+72     	; 0x208c <main+0x544>
			/* if the integer part of floating is 0, then send it */
			if (result == 0) {
    2044:	89 8d       	ldd	r24, Y+25	; 0x19
    2046:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2048:	ab 8d       	ldd	r26, Y+27	; 0x1b
    204a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	a1 05       	cpc	r26, r1
    2050:	b1 05       	cpc	r27, r1
    2052:	21 f4       	brne	.+8      	; 0x205c <main+0x514>
				LCD_SendData('0');
    2054:	80 e3       	ldi	r24, 0x30	; 48
    2056:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_SendData>
    205a:	08 c0       	rjmp	.+16     	; 0x206c <main+0x524>
			} else {
				/* if the integer part of floating is not 0, then send the all number */
				LCD_NumberToString(result);
    205c:	89 8d       	ldd	r24, Y+25	; 0x19
    205e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2060:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2062:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_NumberToString>
			}
			/* send the dot to the LCD */
			LCD_SendData('.');
    206c:	8e e2       	ldi	r24, 0x2E	; 46
    206e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_SendData>
			/* print the floating part of the operation */
			LCD_NumberToString((sint32) floatResult);
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_NumberToString>
    208a:	08 c0       	rjmp	.+16     	; 0x209c <main+0x554>
		} else {
			/* there is no floating part, then send the integer number only */
			LCD_NumberToString(result);
    208c:	89 8d       	ldd	r24, Y+25	; 0x19
    208e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2090:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2092:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_NumberToString>
		}
		/* loop to wait for the C button is pressed to clean the screen for new operation */
		temp = KPD_GetPressedKey();
    209c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KPD_GetPressedKey>
    20a0:	8f 87       	std	Y+15, r24	; 0x0f
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <main+0x562>
		while (temp != 'C') {
			temp = KPD_GetPressedKey();
    20a4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <KPD_GetPressedKey>
    20a8:	8f 87       	std	Y+15, r24	; 0x0f
			/* there is no floating part, then send the integer number only */
			LCD_NumberToString(result);
		}
		/* loop to wait for the C button is pressed to clean the screen for new operation */
		temp = KPD_GetPressedKey();
		while (temp != 'C') {
    20aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ac:	83 34       	cpi	r24, 0x43	; 67
    20ae:	d1 f7       	brne	.-12     	; 0x20a4 <main+0x55c>
			temp = KPD_GetPressedKey();
		}
		/* the C button is pressed and we will clean the screen */
		LCD_ClearScreen();
    20b0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_ClearScreen>
    20b4:	dc cd       	rjmp	.-1096   	; 0x1c6e <main+0x126>

000020b6 <__mulsi3>:
    20b6:	62 9f       	mul	r22, r18
    20b8:	d0 01       	movw	r26, r0
    20ba:	73 9f       	mul	r23, r19
    20bc:	f0 01       	movw	r30, r0
    20be:	82 9f       	mul	r24, r18
    20c0:	e0 0d       	add	r30, r0
    20c2:	f1 1d       	adc	r31, r1
    20c4:	64 9f       	mul	r22, r20
    20c6:	e0 0d       	add	r30, r0
    20c8:	f1 1d       	adc	r31, r1
    20ca:	92 9f       	mul	r25, r18
    20cc:	f0 0d       	add	r31, r0
    20ce:	83 9f       	mul	r24, r19
    20d0:	f0 0d       	add	r31, r0
    20d2:	74 9f       	mul	r23, r20
    20d4:	f0 0d       	add	r31, r0
    20d6:	65 9f       	mul	r22, r21
    20d8:	f0 0d       	add	r31, r0
    20da:	99 27       	eor	r25, r25
    20dc:	72 9f       	mul	r23, r18
    20de:	b0 0d       	add	r27, r0
    20e0:	e1 1d       	adc	r30, r1
    20e2:	f9 1f       	adc	r31, r25
    20e4:	63 9f       	mul	r22, r19
    20e6:	b0 0d       	add	r27, r0
    20e8:	e1 1d       	adc	r30, r1
    20ea:	f9 1f       	adc	r31, r25
    20ec:	bd 01       	movw	r22, r26
    20ee:	cf 01       	movw	r24, r30
    20f0:	11 24       	eor	r1, r1
    20f2:	08 95       	ret

000020f4 <__divmodsi4>:
    20f4:	97 fb       	bst	r25, 7
    20f6:	09 2e       	mov	r0, r25
    20f8:	05 26       	eor	r0, r21
    20fa:	0e d0       	rcall	.+28     	; 0x2118 <__divmodsi4_neg1>
    20fc:	57 fd       	sbrc	r21, 7
    20fe:	04 d0       	rcall	.+8      	; 0x2108 <__divmodsi4_neg2>
    2100:	14 d0       	rcall	.+40     	; 0x212a <__udivmodsi4>
    2102:	0a d0       	rcall	.+20     	; 0x2118 <__divmodsi4_neg1>
    2104:	00 1c       	adc	r0, r0
    2106:	38 f4       	brcc	.+14     	; 0x2116 <__divmodsi4_exit>

00002108 <__divmodsi4_neg2>:
    2108:	50 95       	com	r21
    210a:	40 95       	com	r20
    210c:	30 95       	com	r19
    210e:	21 95       	neg	r18
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	4f 4f       	sbci	r20, 0xFF	; 255
    2114:	5f 4f       	sbci	r21, 0xFF	; 255

00002116 <__divmodsi4_exit>:
    2116:	08 95       	ret

00002118 <__divmodsi4_neg1>:
    2118:	f6 f7       	brtc	.-4      	; 0x2116 <__divmodsi4_exit>
    211a:	90 95       	com	r25
    211c:	80 95       	com	r24
    211e:	70 95       	com	r23
    2120:	61 95       	neg	r22
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	8f 4f       	sbci	r24, 0xFF	; 255
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	08 95       	ret

0000212a <__udivmodsi4>:
    212a:	a1 e2       	ldi	r26, 0x21	; 33
    212c:	1a 2e       	mov	r1, r26
    212e:	aa 1b       	sub	r26, r26
    2130:	bb 1b       	sub	r27, r27
    2132:	fd 01       	movw	r30, r26
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <__udivmodsi4_ep>

00002136 <__udivmodsi4_loop>:
    2136:	aa 1f       	adc	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	ee 1f       	adc	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	a2 17       	cp	r26, r18
    2140:	b3 07       	cpc	r27, r19
    2142:	e4 07       	cpc	r30, r20
    2144:	f5 07       	cpc	r31, r21
    2146:	20 f0       	brcs	.+8      	; 0x2150 <__udivmodsi4_ep>
    2148:	a2 1b       	sub	r26, r18
    214a:	b3 0b       	sbc	r27, r19
    214c:	e4 0b       	sbc	r30, r20
    214e:	f5 0b       	sbc	r31, r21

00002150 <__udivmodsi4_ep>:
    2150:	66 1f       	adc	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	1a 94       	dec	r1
    215a:	69 f7       	brne	.-38     	; 0x2136 <__udivmodsi4_loop>
    215c:	60 95       	com	r22
    215e:	70 95       	com	r23
    2160:	80 95       	com	r24
    2162:	90 95       	com	r25
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	bd 01       	movw	r22, r26
    216a:	cf 01       	movw	r24, r30
    216c:	08 95       	ret

0000216e <__prologue_saves__>:
    216e:	2f 92       	push	r2
    2170:	3f 92       	push	r3
    2172:	4f 92       	push	r4
    2174:	5f 92       	push	r5
    2176:	6f 92       	push	r6
    2178:	7f 92       	push	r7
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	ca 1b       	sub	r28, r26
    2198:	db 0b       	sbc	r29, r27
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	09 94       	ijmp

000021a6 <__epilogue_restores__>:
    21a6:	2a 88       	ldd	r2, Y+18	; 0x12
    21a8:	39 88       	ldd	r3, Y+17	; 0x11
    21aa:	48 88       	ldd	r4, Y+16	; 0x10
    21ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21b8:	b9 84       	ldd	r11, Y+9	; 0x09
    21ba:	c8 84       	ldd	r12, Y+8	; 0x08
    21bc:	df 80       	ldd	r13, Y+7	; 0x07
    21be:	ee 80       	ldd	r14, Y+6	; 0x06
    21c0:	fd 80       	ldd	r15, Y+5	; 0x05
    21c2:	0c 81       	ldd	r16, Y+4	; 0x04
    21c4:	1b 81       	ldd	r17, Y+3	; 0x03
    21c6:	aa 81       	ldd	r26, Y+2	; 0x02
    21c8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ca:	ce 0f       	add	r28, r30
    21cc:	d1 1d       	adc	r29, r1
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	ed 01       	movw	r28, r26
    21da:	08 95       	ret

000021dc <atoi>:
    21dc:	fc 01       	movw	r30, r24
    21de:	88 27       	eor	r24, r24
    21e0:	99 27       	eor	r25, r25
    21e2:	e8 94       	clt
    21e4:	21 91       	ld	r18, Z+
    21e6:	20 32       	cpi	r18, 0x20	; 32
    21e8:	e9 f3       	breq	.-6      	; 0x21e4 <atoi+0x8>
    21ea:	29 30       	cpi	r18, 0x09	; 9
    21ec:	10 f0       	brcs	.+4      	; 0x21f2 <atoi+0x16>
    21ee:	2e 30       	cpi	r18, 0x0E	; 14
    21f0:	c8 f3       	brcs	.-14     	; 0x21e4 <atoi+0x8>
    21f2:	2b 32       	cpi	r18, 0x2B	; 43
    21f4:	41 f0       	breq	.+16     	; 0x2206 <atoi+0x2a>
    21f6:	2d 32       	cpi	r18, 0x2D	; 45
    21f8:	39 f4       	brne	.+14     	; 0x2208 <atoi+0x2c>
    21fa:	68 94       	set
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <atoi+0x2a>
    21fe:	0e 94 36 11 	call	0x226c	; 0x226c <__mulhi_const_10>
    2202:	82 0f       	add	r24, r18
    2204:	91 1d       	adc	r25, r1
    2206:	21 91       	ld	r18, Z+
    2208:	20 53       	subi	r18, 0x30	; 48
    220a:	2a 30       	cpi	r18, 0x0A	; 10
    220c:	c0 f3       	brcs	.-16     	; 0x21fe <atoi+0x22>
    220e:	1e f4       	brtc	.+6      	; 0x2216 <atoi+0x3a>
    2210:	90 95       	com	r25
    2212:	81 95       	neg	r24
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	08 95       	ret

00002218 <memcpy>:
    2218:	fb 01       	movw	r30, r22
    221a:	dc 01       	movw	r26, r24
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <memcpy+0xa>
    221e:	01 90       	ld	r0, Z+
    2220:	0d 92       	st	X+, r0
    2222:	41 50       	subi	r20, 0x01	; 1
    2224:	50 40       	sbci	r21, 0x00	; 0
    2226:	d8 f7       	brcc	.-10     	; 0x221e <memcpy+0x6>
    2228:	08 95       	ret

0000222a <itoa>:
    222a:	fb 01       	movw	r30, r22
    222c:	9f 01       	movw	r18, r30
    222e:	e8 94       	clt
    2230:	42 30       	cpi	r20, 0x02	; 2
    2232:	c4 f0       	brlt	.+48     	; 0x2264 <itoa+0x3a>
    2234:	45 32       	cpi	r20, 0x25	; 37
    2236:	b4 f4       	brge	.+44     	; 0x2264 <itoa+0x3a>
    2238:	4a 30       	cpi	r20, 0x0A	; 10
    223a:	29 f4       	brne	.+10     	; 0x2246 <itoa+0x1c>
    223c:	97 fb       	bst	r25, 7
    223e:	1e f4       	brtc	.+6      	; 0x2246 <itoa+0x1c>
    2240:	90 95       	com	r25
    2242:	81 95       	neg	r24
    2244:	9f 4f       	sbci	r25, 0xFF	; 255
    2246:	64 2f       	mov	r22, r20
    2248:	77 27       	eor	r23, r23
    224a:	0e 94 4e 11 	call	0x229c	; 0x229c <__udivmodhi4>
    224e:	80 5d       	subi	r24, 0xD0	; 208
    2250:	8a 33       	cpi	r24, 0x3A	; 58
    2252:	0c f0       	brlt	.+2      	; 0x2256 <itoa+0x2c>
    2254:	89 5d       	subi	r24, 0xD9	; 217
    2256:	81 93       	st	Z+, r24
    2258:	cb 01       	movw	r24, r22
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	a1 f7       	brne	.-24     	; 0x2246 <itoa+0x1c>
    225e:	16 f4       	brtc	.+4      	; 0x2264 <itoa+0x3a>
    2260:	5d e2       	ldi	r21, 0x2D	; 45
    2262:	51 93       	st	Z+, r21
    2264:	10 82       	st	Z, r1
    2266:	c9 01       	movw	r24, r18
    2268:	0c 94 3e 11 	jmp	0x227c	; 0x227c <strrev>

0000226c <__mulhi_const_10>:
    226c:	7a e0       	ldi	r23, 0x0A	; 10
    226e:	97 9f       	mul	r25, r23
    2270:	90 2d       	mov	r25, r0
    2272:	87 9f       	mul	r24, r23
    2274:	80 2d       	mov	r24, r0
    2276:	91 0d       	add	r25, r1
    2278:	11 24       	eor	r1, r1
    227a:	08 95       	ret

0000227c <strrev>:
    227c:	dc 01       	movw	r26, r24
    227e:	fc 01       	movw	r30, r24
    2280:	67 2f       	mov	r22, r23
    2282:	71 91       	ld	r23, Z+
    2284:	77 23       	and	r23, r23
    2286:	e1 f7       	brne	.-8      	; 0x2280 <strrev+0x4>
    2288:	32 97       	sbiw	r30, 0x02	; 2
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <strrev+0x18>
    228c:	7c 91       	ld	r23, X
    228e:	6d 93       	st	X+, r22
    2290:	70 83       	st	Z, r23
    2292:	62 91       	ld	r22, -Z
    2294:	ae 17       	cp	r26, r30
    2296:	bf 07       	cpc	r27, r31
    2298:	c8 f3       	brcs	.-14     	; 0x228c <strrev+0x10>
    229a:	08 95       	ret

0000229c <__udivmodhi4>:
    229c:	aa 1b       	sub	r26, r26
    229e:	bb 1b       	sub	r27, r27
    22a0:	51 e1       	ldi	r21, 0x11	; 17
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <__udivmodhi4_ep>

000022a4 <__udivmodhi4_loop>:
    22a4:	aa 1f       	adc	r26, r26
    22a6:	bb 1f       	adc	r27, r27
    22a8:	a6 17       	cp	r26, r22
    22aa:	b7 07       	cpc	r27, r23
    22ac:	10 f0       	brcs	.+4      	; 0x22b2 <__udivmodhi4_ep>
    22ae:	a6 1b       	sub	r26, r22
    22b0:	b7 0b       	sbc	r27, r23

000022b2 <__udivmodhi4_ep>:
    22b2:	88 1f       	adc	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	5a 95       	dec	r21
    22b8:	a9 f7       	brne	.-22     	; 0x22a4 <__udivmodhi4_loop>
    22ba:	80 95       	com	r24
    22bc:	90 95       	com	r25
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	08 95       	ret

000022c4 <_exit>:
    22c4:	f8 94       	cli

000022c6 <__stop_program>:
    22c6:	ff cf       	rjmp	.-2      	; 0x22c6 <__stop_program>
